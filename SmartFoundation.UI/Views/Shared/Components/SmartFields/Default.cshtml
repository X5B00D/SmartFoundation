@using SmartFoundation.UI.ViewModels.SmartForm
@using System.Text.Json
@model List<FieldConfig>

@{
    string? currentSection = null;
    var sectionOpen = false;
    var defaultRowOpen = false;
    var webJson = new JsonSerializerOptions(JsonSerializerDefaults.Web);
}

<section class="w-full mt-6">
    <div class="form-container">
        <div class="grid grid-cols-12 gap-6 form-row sm:gap-8">
            @foreach (var field in Model.Where(f => !f.IsHidden && !f.Type.Equals("hidden", StringComparison.OrdinalIgnoreCase)))
            {
                if (!string.IsNullOrWhiteSpace(field.SectionTitle) && field.SectionTitle != currentSection)
                {
                    if (sectionOpen)
                    {
                        @:</div> <!-- close form-row -->
                        @:</div> <!-- close section-box -->
                        sectionOpen = false;
                    }

                    if (defaultRowOpen)
                    {
                        @:</div> <!-- close default form-row -->
                        defaultRowOpen = false;
                    }

                    currentSection = field.SectionTitle;
                    @:<div class="col-span-12 mb-2 section-box">
                        @:<h3 class="section-title">@currentSection</h3>
                        @:<div class="grid grid-cols-12 gap-6 form-row sm:gap-8">
                    sectionOpen = true;
                }
                else
                {
                    if (!sectionOpen && !defaultRowOpen)
                    {
                        @:<div class="grid grid-cols-12 gap-6 form-row sm:gap-8">
                        defaultRowOpen = true;
                    }
                }

                var colCss = field.GetResolvedColCss();

                <div class="form-group @colCss">
                    @if (!field.Type.Equals("checkbox", StringComparison.OrdinalIgnoreCase)
                      && !field.Type.Equals("radio", StringComparison.OrdinalIgnoreCase))
                    {
                        <label for="@field.Name" class="block mb-1.5 text-md font-medium text-gray-900">
                            @field.Label
                            @if (field.Required) { <span class="text-red-500">*</span> }
                        </label>
                    }

                    @switch (field.Type.ToLower())
                    {
                        case "select":
                            <div
                                x-data='sfSelect({
                                    name: "@field.Name",
                                    placeholder: "@(field.Placeholder ?? "اختر...")",
                                    multiple: @(field.Multiple.ToString().ToLower()),
                                    disabled: @(field.Disabled.ToString().ToLower()),
                                    readonly: @(field.Readonly.ToString().ToLower()),
                                    initial: "@(field.Value ?? "")",
                                    options: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
                                                field.Options.Select(o => new { o.Value, o.Text, o.Disabled, o.Selected })))
                                })'
                                x-init="init()"
                                x-on:change="@field.OnChangeJs"
                                data-dependson="@field.DependsOn"
                                data-dependsurl="@field.DependsUrl"
                                class="relative"
                                x-on:keydown.escape.window="open=false">

                                <input type="hidden" x-ref="hidden" name="@field.Name" :value="serialize()"
                                       @(field.Required ? "required" : null) @(field.Disabled ? "disabled" : null) />

                                <button type="button"
                                        x-ref="anchor"
                                        class="sf-select @field.ExtraCss"
                                        :disabled="disabled || readonly"
                                        :aria-expanded="open.toString()"
                                        x-on:click="togglePanel()"
                                        x-on:keydown.enter="togglePanel()">
                                    <span class="truncate" x-text="displayText()"></span>
                                    <span class="absolute inset-y-0 flex items-center pointer-events-none end-0 pe-2">
                                        <i class="fa fa-chevron-down text-gray-400"></i>
                                    </span>
                                </button>

                                <template x-teleport="body">
                                    <div x-show="open" x-transition x-cloak
                                         x-on:click.outside="open=false"
                                         :style="panelStyle"
                                         class="sf-select-panel fixed z-[9999] animate-fade-in"> 
                                        <div class="flex justify-end p-2 pb-0">
                                            <button type="button" class="text-xs text-gray-500 hover:text-gray-700" x-on:click="clear()">مسح</button>
                                        </div>
                                        <div class="p-2">
                                            <input type="text" x-model.trim="q" placeholder="بحث..." dir="rtl"
                                                   class="w-full px-3 py-2 text-sm border border-gray-200 rounded-md focus:outline-none focus:ring-1 focus:ring-emerald-600" />
                                        </div>
                                        <ul class="py-1 overflow-y-auto max-h-60">
                                            <template x-for="opt in filtered()" :key="opt.value">
                                                <li class="px-3 py-2 cursor-pointer select-none hover:bg-gray-50"
                                                    :class="opt.disabled ? 'opacity-50 cursor-not-allowed' : ''"
                                                    x-on:click.stop="toggle(opt)">
                                                    <span class="truncate grow" x-text="opt.text"></span>
                                                </li>
                                            </template>
                                        </ul>
                                    </div>
                                </template>
                            </div>
                            break;

                        case "checkbox":
                            <div class="flex items-start gap-2">
                                <input type="hidden" name="@field.Name" value="false" />
                                <input type="checkbox" id="@field.Name" name="@field.Name" value="true"
                                       class="sf-checkbox @field.ExtraCss"
                                       @(field.Value == "true" ? "checked" : null)
                                       x-on:change="@field.OnChangeJs" />
                                <label for="@field.Name" class="leading-relaxed text-gray-700">@field.Label</label>
                            </div>
                            break;

                        case "radio":
                            <div class="grid gap-2 mt-1">
                                <span class="sf-label">@field.Label</span>
                                @foreach (var opt in field.Options)
                                {
                                    var radioId = $"{field.Name}_{opt.Value}";
                                    <label for="@radioId" class="flex items-center gap-2 text-gray-700 text-md">
                                        <input type="radio" id="@radioId" name="@field.Name" value="@opt.Value"
                                               class="sf-radio"
                                               @(opt.Selected ? "checked" : null)
                                               @(opt.Disabled ? "disabled" : null)
                                               x-on:change="@field.OnChangeJs" />
                                        <span>@opt.Text</span>
                                    </label>
                                }
                            </div>
                            break;

                        case "file":
                            <input type="file" id="@field.Name" name="@field.Name"
                                   class="sf-file @field.ExtraCss"
                                   @(field.Multiple ? "multiple" : null)
                                   @(field.Required ? "required" : null)
                                   x-on:change="@field.OnChangeJs" />
                            break;

                        case "date":
                            <!-- نسخة date مثل ما في SmartForm -->
                            <input type="date" id="@field.Name" name="@field.Name"
                                   value="@field.Value"
                                   class="sf-date @field.ExtraCss"
                                   placeholder="@field.Placeholder"
                                   @(field.Required ? "required" : null)
                                   @(field.Disabled ? "disabled" : null)
                                   @(field.Readonly ? "readonly" : null) />
                            break;

                        case "date-range":
                            <!-- نسخة date-range -->
                            <div class="grid grid-cols-12 gap-3">
                                <div class="@field.GetResolvedColCss()">
                                    <input type="date" id="@($"{field.Name}_From")" name="@($"{field.Name}From")"
                                           class="sf-date" placeholder="من" />
                                </div>
                                <div class="@field.GetResolvedColCss()">
                                    <input type="date" id="@($"{field.Name}_To")" name="@($"{field.Name}To")"
                                           class="sf-date" placeholder="إلى" />
                                </div>
                            </div>
                            break;

                        case "textarea":
                            <textarea id="@field.Name" name="@field.Name"
                                      placeholder="@field.Placeholder"
                                      rows="4"
                                      class="sf-textarea @field.ExtraCss"
                                      @(field.Required ? "required" : null)
                                      @(field.Disabled ? "disabled" : null)
                                      @(field.Readonly ? "readonly" : null)>@field.Value</textarea>
                            break;

                        default:
                            <input type="@field.Type"
                                   id="@field.Name"
                                   name="@field.Name"
                                   value="@field.Value"
                                   placeholder="@field.Placeholder"
                                   class="input @field.ExtraCss"
                                   @(field.Required ? "required" : null)
                                   @(field.Disabled ? "disabled" : null)
                                   @(field.Readonly ? "readonly" : null) />
                            break;
                    }

                    @if (!string.IsNullOrWhiteSpace(field.HelpText))
                    {
                        <p class="mt-1 text-xs text-gray-500">@field.HelpText</p>
                    }
                </div>
            }

            @if (defaultRowOpen)
            {
                @:</div>
            }
            @if (sectionOpen)
            {
                @:</div>
                @:</div>
            }
        </div>
    </div>
</section>
